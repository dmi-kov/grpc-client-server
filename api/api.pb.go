// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type URLMessage struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *URLMessage) Reset()         { *m = URLMessage{} }
func (m *URLMessage) String() string { return proto.CompactTextString(m) }
func (*URLMessage) ProtoMessage()    {}
func (*URLMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *URLMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_URLMessage.Unmarshal(m, b)
}
func (m *URLMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_URLMessage.Marshal(b, m, deterministic)
}
func (m *URLMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_URLMessage.Merge(m, src)
}
func (m *URLMessage) XXX_Size() int {
	return xxx_messageInfo_URLMessage.Size(m)
}
func (m *URLMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_URLMessage.DiscardUnknown(m)
}

var xxx_messageInfo_URLMessage proto.InternalMessageInfo

func (m *URLMessage) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type ResponseMessage struct {
	Response             []byte   `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseMessage) Reset()         { *m = ResponseMessage{} }
func (m *ResponseMessage) String() string { return proto.CompactTextString(m) }
func (*ResponseMessage) ProtoMessage()    {}
func (*ResponseMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *ResponseMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseMessage.Unmarshal(m, b)
}
func (m *ResponseMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseMessage.Marshal(b, m, deterministic)
}
func (m *ResponseMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseMessage.Merge(m, src)
}
func (m *ResponseMessage) XXX_Size() int {
	return xxx_messageInfo_ResponseMessage.Size(m)
}
func (m *ResponseMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseMessage proto.InternalMessageInfo

func (m *ResponseMessage) GetResponse() []byte {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*URLMessage)(nil), "api.URLMessage")
	proto.RegisterType((*ResponseMessage)(nil), "api.ResponseMessage")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 134 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x54, 0x92, 0xe3, 0xe2, 0x0a, 0x0d,
	0xf2, 0xf1, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x15, 0x12, 0xe0, 0x62, 0x2e, 0x2d, 0xca, 0x91,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x95, 0x74, 0xb9, 0xf8, 0x83, 0x52, 0x8b, 0x0b,
	0xf2, 0xf3, 0x8a, 0x53, 0x61, 0x8a, 0xa4, 0xb8, 0x38, 0x8a, 0xa0, 0x42, 0x60, 0x95, 0x3c, 0x41,
	0x70, 0xbe, 0x91, 0x25, 0x17, 0xb3, 0x63, 0x80, 0xa7, 0x90, 0x11, 0x17, 0xbb, 0x73, 0x62, 0x4e,
	0x4e, 0x68, 0x90, 0x8f, 0x10, 0xbf, 0x1e, 0xc8, 0x46, 0x84, 0x1d, 0x52, 0x22, 0x60, 0x01, 0x34,
	0x43, 0x0d, 0x18, 0x93, 0xd8, 0xc0, 0xae, 0x32, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x37, 0xf1,
	0xa9, 0x96, 0xa2, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	CallURL(ctx context.Context, in *URLMessage, opts ...grpc.CallOption) (API_CallURLClient, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CallURL(ctx context.Context, in *URLMessage, opts ...grpc.CallOption) (API_CallURLClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[0], "/api.API/CallURL", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPICallURLClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_CallURLClient interface {
	Recv() (*ResponseMessage, error)
	grpc.ClientStream
}

type aPICallURLClient struct {
	grpc.ClientStream
}

func (x *aPICallURLClient) Recv() (*ResponseMessage, error) {
	m := new(ResponseMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	CallURL(*URLMessage, API_CallURLServer) error
}

// UnimplementedAPIServer can be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (*UnimplementedAPIServer) CallURL(req *URLMessage, srv API_CallURLServer) error {
	return status.Errorf(codes.Unimplemented, "method CallURL not implemented")
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_CallURL_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(URLMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).CallURL(m, &aPICallURLServer{stream})
}

type API_CallURLServer interface {
	Send(*ResponseMessage) error
	grpc.ServerStream
}

type aPICallURLServer struct {
	grpc.ServerStream
}

func (x *aPICallURLServer) Send(m *ResponseMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.API",
	HandlerType: (*APIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CallURL",
			Handler:       _API_CallURL_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
